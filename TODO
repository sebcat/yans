
- /a1/report-section: get report section from store

- create PID files outside of chroot
- have remove_pidfile function take a path

## subject
  - A subject is one IP(v4/v6) address reachable from a certain NIC with a
    specific hardware address as the next hop (which may or may not be the
    subject's hardware address)
  - a subject has:
    - source interface
    - source hwaddr
    - next hop hwaddr (gw or the subject itself)
    - destination IP address
    - name (optional, used for HTTP Host header and SNI)
  - 10.0.2.72 is two different subjects if found on different NICs
  - 10.0.2.72 is two different subjects if found with different hwaddrs as
    the next hop
  - 10.0.2.72 with a name of example.com and 10.0.2.72 without a name
    are the same subject. If both 10.0.2.72 without and with a name is
    entered, the name is/should be associated with 10.0.2.72 and 10.0.2.72
    is scanned with that name when doing TLS-SNI and HTTP requests.

## ethd
  - interfaces and stuff are loaded at boot, may change during uptime

## lua
  - receive/transmit buffers for fd
  - event driven poll
  - callback system in lua, similar to eds. on_next_fd, on_readable,
    on_writable, on_done

Events = require "file.events" -- poll wrapper
FooDriver = {...} -- load like: require"drivers.foo"
function FooDriver:new{...} ... end
function FooDriver:register(ev) ... end
function FooDriver:on_next_fd() ... end
function FooDriver:on_readable(ev, fd) ... end
function FooDriver:on_writable(ev, fd) ... end
function FooDriver:on_eval_error(ev, fd) ... end
function FooDriver:on_done(ev, fd) ... end
Events:new{
  nconcurrent = 10,
  nsec_timeout = 10,
  driver = FooDriver:new{...},
}:run()

Buffer = require"yans.file.buf"
buf = Buffer:new{initial = ..., max = ...}
nread, err = fd:read(buf)
nleft, err = fd:write(buf)
ev:register(
ev:clear_actions(fd)
ev:set_on_readable(fd, rfunc)
ev:set_on_writable(fd, wfunc)
ev:clear_on_readable(fd)
ev:clear_on_writable(fd)

## ethframe
  - SSDP, MDNS, ICMP multicasts
  - choose sequential/procedurally generated/PRNG source port within suitable
    range instead of hard-coding?
  - generate packet generators from DSL?
  - only have ethframe distribute /dev/bpf sockets, rip out the frame
    generation to a library called from lua (preferably DSL generated)
    or maybe not - too many ethernet writer processes are maybe bad?
    some MAC checks, &c. If that is a problem, it could be mitigated in the
    kernel, using a custom devfs-node for accessing the NIC directly

## lib/net/url
  - url_normalize: if we have a percent-encoding to a valid char, decode it?

## lib/net/ip
  - make it possible to add/remove an address/range to/from a range
  - have contains work on current instead of first?

## new services

  - bannerd: UDP/TCP banner grabbing with (D)TLS support (libressl?)
  - tlshellod: TLS negotiation w/ STARTTLS
  - spiderd: HTTP crawler (or HTTP proxy?)
    * have a file with requests (raw HTTP requests?), pass it to the daemon
      which generates a file with responses. Parse responses and generate new
      requests. How to find requests? Have identity hash mapped to offsets?

## distribution
  - Yocto linux based? NanoBSD based?( XXX NanoBSD is obsolete) Homebrewn
    FreeBSD dist?
  - .vmdk image
  - read-only fs
  - /var/yans as tmpfs/md(4)
  - nginx
  - /usr/share/www/a1
  - API implemented as yans CGIs, with implicit seccomp-bpf/capsicum
    on cgi.init

more areas:
  protocols: dns, ssh, ftp, http, smtp, pop3, imap, vnc, rdp
  functionality: enumeration of capabilities (cipher suites, commands, &c)
                 default account testing

## slask

for E in $(store list); do store list $E; done | cut -f 1 -d ' ' | paste -s -d+ - | bc

tcpdump -n '(ether broadcast or ether multicast or ether dst 00:24:d7:17:9c:38) and (not ether src 00:24:d7:17:9c:38)'

tcpdump -n 'ether src not <local0> and ether src not <local1> ... and ether src not <localN>'

echo -en 'M-SEARCH * HTTP/1.1\r\nHOST: 239.255.255.250:1900\r\nMAN: ssdp:discover\r\nMX: 10\r\nST: ssdp:all\r\nUser-Agent: DinMammaOchDanHarmon/1.0 UPnP/1.1\r\n\r\n' | socat stdio udp4-datagram:239.255.255.250:1900

echo -en 'M-SEARCH * HTTP/1.1\r\nHOST: [FF02::C]:1900\r\nMAN: ssdp:discover\r\nMX: 10\r\nST: ssdp:all\r\nUser-Agent: DinMammaOchDanHarmon/1.0 UPnP/1.1\r\n\r\n' | socat stdio 'udp6-datagram:[FF02::C%wlan0]:1900'
