#!/usr/bin/env lua
-- vim: shiftwidth=2 tabstop=2 expandtab

local function test_addr_tostring_self(str)
	addr = yans.ip.addr(str)
	if tostring(addr) ~= str then
    error(tostring(addr).." ~= "..str)
  end
end

-- __tostring
test_addr_tostring_self("127.0.0.1")
test_addr_tostring_self("ff02::1")

-- equals
assert(yans.ip.addr"127.0.0.1":equals("127.0.0.1"))
assert(yans.ip.addr"127.0.0.1":equals(yans.ip.addr"127.0.0.1"))
assert(yans.ip.addr"127.0.0.1 127.0.6.4":equals(yans.ip.addr"127.0.0.1"))
assert(yans.ip.addr"127.0.0.1 127.0.6.4":equals("127.0.0.1"))
assert(yans.ip.addr"\t 127.0.0.1\t ":equals(yans.ip.addr"127.0.0.1"))
assert(yans.ip.addr"\t 127.0.0.1\t ":equals("127.0.0.1"))
assert(yans.ip.addr"127.0.0.1":equals(yans.ip.addr"127.0.0.0") == false)
assert(yans.ip.addr"127.0.0.1":equals("127.0.0.0") == false)
assert(yans.ip.addr"127.0.0.1":equals(yans.ip.addr"127.0.0.2") == false)
assert(yans.ip.addr"ff02::1":equals(yans.ip.addr"ff02::1"))
assert(yans.ip.addr"ff02::1":equals("ff02::1"))
assert(yans.ip.addr"ff02::1":equals(yans.ip.addr"ff02::") == false)
assert(yans.ip.addr"ff02::1":equals("ff02::") == false)
assert(yans.ip.addr"ff02::1":equals(yans.ip.addr"ff02::2") == false)
assert(yans.ip.addr"ff02::1":equals("ff02::2") == false)

-- compare
assert(yans.ip.addr"127.0.0.0":compare("127.0.0.1") < 0)
assert(yans.ip.addr"127.0.0.0":compare(yans.ip.addr"127.0.0.1") < 0)
assert(not(yans.ip.addr"127.0.0.1":compare("127.0.0.1") < 0))
assert(not(yans.ip.addr"127.0.0.2":compare(yans.ip.addr"127.0.0.1") < 0))
assert(yans.ip.addr"ff02::2":compare"ff02::1" > 0)
assert(yans.ip.addr"127.0.0.1":compare("127.0.0.0") > 0)
assert(yans.ip.addr"127.0.0.1":compare(yans.ip.addr"127.0.0.0") > 0)
assert(yans.ip.addr"127.0.0.2":compare(yans.ip.addr"127.0.0.1") > 0)
assert(yans.ip.addr"ff02::1":compare("ff02::2") < 0)
assert(yans.ip.addr"ff02::2":compare("ff02::1") > 0)

assert(yans.ip.addr"127.0.0.1":compare("127.0.0.1")  == 0)
assert(yans.ip.addr"::1":compare"::1"  == 0)
-- __add
local a = yans.ip.addr"126.255.255.255"
local res = a + 2
assert(a:equals("126.255.255.255"))
assert(res:equals("127.0.0.1"))
local a = yans.ip.addr"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"
local res = a + 2
assert(a:equals("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"))
assert(res:equals("::1"))


-- __sub
local a = yans.ip.addr"127.0.0.1"
local res = a - 2
assert(a:equals("127.0.0.1"))
assert(res:equals("126.255.255.255"))
local a = yans.ip.addr"::1"
local res = a - 2
assert(a:equals("::1"))
assert(res:equals("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"))

-- mutable add method
local function addr_add(addr, n, expected)
  actual = yans.ip.addr(addr):add(n)
  if tostring(actual) ~= expected then
    error(addr.." + "..tostring(n)..": expected "..expected..
        ", was: "..tostring(actual))
  end
end
local a = yans.ip.addr"127.0.0.1"
a:add(1)
assert(a:equals("127.0.0.2"))
addr_add("255.255.255.255", 1, "0.0.0.0")
addr_add("0.0.255.255", 1, "0.1.0.0")
addr_add("0.0.0.0", -1, "255.255.255.255")
addr_add("0.1.0.0", -1, "0.0.255.255")
addr_add("127.0.0.1", -1, "127.0.0.0")
addr_add("127.0.0.0", 1, "127.0.0.1")
addr_add("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", 1, "::")
addr_add("::ffff:ffff:ffff:ffff", 1, "0:0:0:1::")
addr_add("::", -1, "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
addr_add("::1:0:0:0:0", -1, "::ffff:ffff:ffff:ffff")
addr_add("ff02::1", 1, "ff02::2")
addr_add("::1", -1, "::")

-- mutable sub method
local function addr_sub(addr, n, expected)
  actual = yans.ip.addr(addr):sub(n)
  if tostring(actual) ~= expected then
    error(addr.." + "..tostring(n)..": expected "..expected..", was: "
        ..tostring(actual))
  end
end
local a = yans.ip.addr"127.0.0.1"
a:sub(1)
assert(a:equals("127.0.0.0"))
addr_sub("255.255.255.255", -1, "0.0.0.0")
addr_sub("0.0.255.255", -1, "0.1.0.0")
addr_sub("0.0.0.0", 1, "255.255.255.255")
addr_sub("0.1.0.0", 1, "0.0.255.255")
addr_sub("127.0.0.1", 1, "127.0.0.0")
addr_sub("127.0.0.0", -1, "127.0.0.1")
addr_sub("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff", -1, "::")
addr_sub("::ffff:ffff:ffff:ffff", -1, "0:0:0:1::")
addr_sub("::", 1, "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
addr_sub("::1:0:0:0:0", 1, "::ffff:ffff:ffff:ffff")
addr_sub("ff02::1", -1, "ff02::2")
addr_sub("::1", 1, "::")

-- yans.ip.block first, last
local function block(s, efirst, elast)
  blk = yans.ip.block(s)
  afirst, alast = tostring(blk:first()), tostring(blk:last())
  if afirst ~= efirst or alast ~= elast then
    error(string.format("expected %s-%s, was %s-%s",
        efirst, elast, afirst, alast))
  end
end
block("127.0.0.1", "127.0.0.1", "127.0.0.1")
block("::/65", "::", "::7fff:ffff:ffff:ffff")
block("::/0", "::", "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
block("::/128", "::", "::")
block("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/65",
    "ffff:ffff:ffff:ffff:8000::", "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
block("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/0",
    "::", "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
block("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128",
    "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff",
    "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
block("2606:2800:220:1:248:1893:25c8:1946/112",
    "2606:2800:220:1:248:1893:25c8:0",
    "2606:2800:220:1:248:1893:25c8:ffff")
block("0.0.0.0/23", "0.0.0.0", "0.0.1.255")
block("0.0.0.0/0", "0.0.0.0", "255.255.255.255")
block("0.0.0.0/32", "0.0.0.0", "0.0.0.0")
block("255.255.255.255/23", "255.255.254.0", "255.255.255.255")
block("255.255.255.255/0", "0.0.0.0", "255.255.255.255")
block("255.255.255.255/32", "255.255.255.255", "255.255.255.255")

local function block_str(s, expected)
  blk = yans.ip.block(s)
  actual = tostring(blk)
  if actual ~= expected then
    error(string.format("expected %q, got %q", expected, actual))
  end
end
block_str("127.0.0.1", "127.0.0.1")
block_str("::/65", "::-::7fff:ffff:ffff:ffff")
block_str("::/0", "::-ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
block_str("::/128", "::")
block_str("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/65",
    "ffff:ffff:ffff:ffff:8000::-ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
block_str("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/0",
    "::-ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
block_str("ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff/128",
    "ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff")
block_str("2606:2800:220:1:248:1893:25c8:1946/112",
    "2606:2800:220:1:248:1893:25c8:0-2606:2800:220:1:248:1893:25c8:ffff")
block_str("0.0.0.0/23", "0.0.0.0-0.0.1.255")
block_str("0.0.0.0/0", "0.0.0.0-255.255.255.255")
block_str("0.0.0.0/32", "0.0.0.0")
block_str("255.255.255.255/23", "255.255.254.0-255.255.255.255")
block_str("255.255.255.255/0", "0.0.0.0-255.255.255.255")
block_str("255.255.255.255/32", "255.255.255.255")

local function block_err(s)
  local ok, res = pcall(yans.ip.block, s)
  if ok then
    error("expected failure, got "..tostring(res))
  end
end
block_err("")
block_err("garbage")
block_err("127.0.0.1-garbage")
block_err("garbage-127.0.0.1")
block_err("gar-bage")
block_err("127.0.0.1/e")
block_err("garbage/24")
block_err("garbage/e")
block_err("127.0.0.1-::1")
block_err("::1-127.0.0.1")

local function block_contains(blk, addr, expected_in)
  blk = yans.ip.block(blk)
  addr = yans.ip.addr(addr)
  if blk:contains(addr) ~= expected_in then
    if expected_in then
      error(string.format("%s not in %s", addr, blk))
    else
      error(string.format("%s contains %s", addr, blk))
    end
  end
end

block_contains("127.0.0.0/25", "126.255.255.255", false)
block_contains("127.0.0.0/25", "127.0.0.0", true)
block_contains("127.0.0.0/25", "127.0.0.64", true)
block_contains("127.0.0.0/25", "127.0.0.127", true)
block_contains("127.0.0.0/25", "127.0.0.128", false)
block_contains("127.0.0.1/32", "127.0.0.0", false)
block_contains("127.0.0.1/32", "127.0.0.1", true)
block_contains("127.0.0.1/32", "127.0.0.2", false)

block_contains("2001::1/127",
  "2000:ffff:ffff:ffff:ffff:ffff:ffff:ffff", false)
block_contains("2001::1/127", "2001::", true)
block_contains("2001::1/127", "2001::1", true)
block_contains("2001::1/127", "2001::2", false)
block_contains("2001::1/128", "2001::0", false)
block_contains("2001::1/128", "2001::1", true)
block_contains("2001::1/128", "2001::2", false)

local blk = yans.ip.block("0/0")
assert(blk:contains("0.0.0.0"))
assert(blk:contains("0.0.0.255"))
assert(blk:contains("0.0.255.0"))
assert(blk:contains("0.255.0.0"))
assert(blk:contains("255.0.0.0"))
assert(blk:contains("127.127.127.127"))
assert(blk:contains("255.255.255.255"))

local function blocks_str(s, expected)
  blks = yans.ip.addrs(s)
  actual = tostring(blks)
  if actual ~= expected then
    error(string.format("expected %q, got %q", expected, actual))
  end
end
blocks_str("", "")
blocks_str("127.0.0.1", "127.0.0.1")
blocks_str("127.0.0.1-127.0.0.2", "127.0.0.1-127.0.0.2")
blocks_str("127.0.0.1-127.0.0.2, ", "127.0.0.1-127.0.0.2")
blocks_str("127.0.0.1-127.0.0.2, ::1", "127.0.0.1-127.0.0.2 ::1")
blocks_str("127.0.0.1-127.0.0.2, ::1/32",
    "127.0.0.1-127.0.0.2 ::-::ffff:ffff:ffff:ffff:ffff:ffff")
blocks_str("127.0.0.1-127.0.0.2, ::1/32 \t\r\n,",
    "127.0.0.1-127.0.0.2 ::-::ffff:ffff:ffff:ffff:ffff:ffff")

-- sort order and compression
blocks_str("::1 127.0.0.1", "127.0.0.1 ::1")
blocks_str("127.0.0.1 ::1", "127.0.0.1 ::1")
blocks_str("127.0.0.1 ::1 ::2", "127.0.0.1 ::1-::2")
blocks_str("127.0.0.1 ::2 ::1", "127.0.0.1 ::1-::2")
blocks_str("::2 127.0.0.1 ::1", "127.0.0.1 ::1-::2")
blocks_str("::2 ::1 127.0.0.1", "127.0.0.1 ::1-::2")
blocks_str("::1 ::2 127.0.0.1", "127.0.0.1 ::1-::2")
blocks_str("::1 127.0.0.1 ::2", "127.0.0.1 ::1-::2")
blocks_str("127.0.0.1 127.0.0.2 ::1", "127.0.0.1-127.0.0.2 ::1")
blocks_str("127.0.0.1 ::1 127.0.0.2", "127.0.0.1-127.0.0.2 ::1")
blocks_str("127.0.0.2 ::1 127.0.0.1", "127.0.0.1-127.0.0.2 ::1")
blocks_str("127.0.0.2 127.0.0.1 ::1", "127.0.0.1-127.0.0.2 ::1")
blocks_str("::1 127.0.0.1 127.0.0.2", "127.0.0.1-127.0.0.2 ::1")
blocks_str("::1 127.0.0.2 127.0.0.1", "127.0.0.1-127.0.0.2 ::1")
blocks_str("127.0.0.3 ::1 127.0.0.1", "127.0.0.1 127.0.0.3 ::1")
blocks_str("127.0.0.2 127.0.0.3 ::1 127.0.0.1", "127.0.0.1-127.0.0.3 ::1")

local function expand_addrs(input, expected)
  local pre = tostring(input)
  local addrs = yans.ip.addrs(input)
  local i = 1
  for addr in addrs:next() do
    if not addr:equals(expected[i]) then
      error(string.format("index:%d addr:%s expected:%s", i,
          tostring(addr), tostring(expected[i])))
    end
    i = i + 1
  end
  local post = tostring(input)
  if pre ~= post then
    error(string.format("post iter - pre:%s post:%s", pre, post))
  end
end

expand_addrs("127.0.0.0/31 127.1.0.0/30", {
  "127.0.0.0", "127.0.0.1",
  "127.1.0.0", "127.1.0.1", "127.1.0.2", "127.1.0.3"})
expand_addrs("127.0.0.0-127.0.0.1 127.1.0.0-127.1.0.3", {
  "127.0.0.0", "127.0.0.1",
  "127.1.0.0", "127.1.0.1", "127.1.0.2", "127.1.0.3"})
expand_addrs("127.0.0.0 127.0.0.1 127.1.0.0 127.1.0.1 127.1.0.2 127.1.0.3", {
  "127.0.0.0", "127.0.0.1",
  "127.1.0.0", "127.1.0.1", "127.1.0.2", "127.1.0.3"})


IFACES = yans.eth.ifaces()
ROUTES = yans.ip.routes()

assert(type(IFACES) == "table")
assert(type(ROUTES) == "table")

-- init iface index -> name map
local index2name = {}
for _, iface in pairs(IFACES.ifaces) do
  index2name[iface.index] = iface.name
end

local function print_routes(routes)
  print(string.format("%30s %20s %8s", "Destination", "Gateway", "Netif"))
  for _, route in ipairs(routes) do
    local gw
    if route.gw_ifindex then
      gw = index2name[route.gw_ifindex]
    else
      gw = route.gw
    end

    local line = string.format("%30s %20s %8s", route.block,
        gw, index2name[route.ifindex])
    print(line)
  end
end

-- print the routing table to excercise the code paths
print("IP4")
print_routes(ROUTES.ip4_routes)
print("IP6")
print_routes(ROUTES.ip6_routes)

local function get_loopback_ifname()
  for _,iface in pairs(IFACES.ifaces) do
    if iface.loopback then return iface.name end
  end
end

-- Test IPv6 zone ID
-- assume we have a standard IPv6 loopback setup with support for
-- broadcast address(es)
test_addr_tostring_self(string.format("ff02::1%%%s", get_loopback_ifname()))
test_addr_tostring_self(string.format("ff02::2%%%s", get_loopback_ifname()))

-- Test reorder-4 iterations
local function testr4(blk)
  local res = {}
  local addrs = yans.ip.addrs(blk)
  for addr in addrs:nextr4() do
    table.insert(res, tostring(addr))
  end
  local actual = yans.ip.addrs(table.concat(res, " "))
  if tostring(addrs) ~= tostring(actual) then
    error(string.format("\"%s\" ~= \"%s\"", tostring(addrs), tostring(actual)))
  end
end

-- Currently, ASAN gets sad when we have too long ranges, for an arbitrary
-- definition of too long. Try to keep the ranges small and test boundaries.
testr4("")
testr4("127.0.0.1")
testr4("::1")
testr4("127.0.0.1 ::1")
testr4("127.0.0.1-127.0.0.16 ::1-::10")
testr4("::1")
testr4("::1 ::3")
testr4("::1 ::3 127.0.0.1-127.0.0.5")
testr4("0.0.0.0-0.0.0.254")
testr4("0.0.0.0-0.0.0.255")
testr4("0.0.0.0-0.0.1.0")
testr4("1.0.0.0-1.0.0.254")
testr4("1.0.0.0-1.0.0.255")
testr4("1.0.0.0-1.0.1.0")
for i = 1, 32 do
  testr4(string.format("::1-::10 ff::1 aa::2 127.0.0.1-127.0.0.%d", i))
end

