local function teq(input, expected)
  local actual = tostring(ip.ports(input))
  if actual ~= expected then
    error(string.format("input:%q expected:%q actual:%q", input, expected,
        actual))
  end
end

-- test (de-)serialization in sorted order
teq("", "")
teq(" ", "")
teq(" ,", "")
teq(" ,\t", "")
teq("0", "0")     -- port 0 makes little sense, but we should be able to
teq("0-1", "0-1") -- represent it if the user explicitly wants it
teq("1", "1")
teq(" 1", "1")
teq("1 ", "1")
teq(" 1 ", "1")
teq("1-2", "1-2")
teq(" 1-2", "1-2")
teq("1-2 ", "1-2")
teq(" 1-2 ", "1-2")
teq("1-2,", "1-2")
teq("1-2,4", "1-2 4")
teq("1-2, 4", "1-2 4")
teq("1-2, 4-6", "1-2 4-6")
teq("1-2, 4-6 ", "1-2 4-6")

-- test range start-end
teq("1-2, 8-10", "1-2 8-10")
teq("2-1, 10-8", "1-2 8-10")

-- test sort order
teq("4-6, 1-2", "1-2 4-6")
teq("4-5 1-2", "1-2 4-5")
teq("1-2 6-8 4", "1-2 4 6-8")
teq("1-2 4 6-8", "1-2 4 6-8")
teq("6-8 1-2 4", "1-2 4 6-8")
teq("6-8 4 1-2", "1-2 4 6-8")
teq("4 1-2 6-8", "1-2 4 6-8")
teq("4 6-8 1-2", "1-2 4 6-8")

-- test range compression
teq("1-2 1-4", "1-4")
teq("1-4, 1-2", "1-4")
teq("9-8 1-6 7", "1-9")
teq("4-5 1-10", "1-10")
teq("1-10 3-4", "1-10")
teq("1-3 5-8 4", "1-8")
teq("1-3 4 5-8", "1-8")
teq("5-8 1-3 4", "1-8")
teq("5-8 4 1-3", "1-8")
teq("4 1-3 5-8", "1-8")
teq("4 5-8 1-3", "1-8")
teq("1,2,4", "1-2 4")
teq("1,4,2", "1-2 4")
teq("4,2,1", "1-2 4")
teq("4,1,2", "1-2 4")
teq("2,1,4", "1-2 4")
teq("2,4,1", "1-2 4")
teq("1,2,4,5", "1-2 4-5")
teq("1,4,5,2", "1-2 4-5")
teq("1,5,2,4", "1-2 4-5")
teq("5,2,4,1", "1-2 4-5")
teq("5,4,1,2", "1-2 4-5")
teq("5,1,2,4", "1-2 4-5")
teq("2,4,5,1", "1-2 4-5")
teq("2,5,1,4", "1-2 4-5")
teq("2,1,4,5", "1-2 4-5")
teq("4,5,2,1", "1-2 4-5")
teq("4,2,1,5", "1-2 4-5")
teq("4,1,5,2", "1-2 4-5")
teq("1,2,3,4,5", "1-5")
teq("1,2,4,5,6", "1-2 4-6")
teq("1,2,3,5,6", "1-3 5-6")
teq("1-2, 4, 5,7,8, 10,12,13", "1-2 4-5 7-8 10 12-13")
teq("1,3,4,5, 7", "1 3-5 7")
teq("1,2,3,4,5, 7", "1-5 7")
teq("1,2,3,4,5, 7,8", "1-5 7-8")
teq("1, 3,4,5,6", "1 3-6")


local function tfail(input)
  local actual, err = ip.ports(input)
  if not err then
    error(string.format("input:%q expected failure to parse, was:%q", input,
        tostring(actual)))
  end
end

-- test invalid ranges
tfail("-1")
tfail("1-")
tfail("4-8 -1")
tfail("-1 4-8")
tfail("4-8 1-")
tfail("1- 4-8")

local function texpand(input, expected)
  local res, err = ip.ports(input)
  if err then error("failed to parse " .. input) end
  local i = 1
  for port in res:next() do
    if port ~= expected[i] then
      error(string.format("input:%q expected %d at index %d, got %d",
          input, expected[i], i, port))
    end
    i = i + 1
  end
  if expected[i] then
    error("unexpected end of input range at index " .. tostring(i))
  end
end

local function range(start, stop)
  local res = {}
  for i = start, stop, 1 do
    table.insert(res, i)
  end
  return res
end

texpand("", {})
texpand("1", {1})
texpand("1-2", {1,2})
texpand("2-1", {1,2})
texpand("1, 8-9, 4", {1, 4, 8, 9})
texpand("3-4 1-2", range(1,4))
texpand("0-65535", range(0,65535))
texpand("65535-0", range(0,65535))
texpand("65535-1", range(1,65535))
texpand("1-65535", range(1,65535))

local function tadd(range, vals, expected)
  for _, v in ipairs(vals) do
    range:add(v)
  end
  local actual = tostring(range)
  if actual ~= expected then
    error(string.format("input:%q expected:%q actual:%q", input, expected,
        actual))
  end
end

tadd(ip.ports"", {}, "")
tadd(ip.ports"", {1,2,3, 5, 10}, "1-3 5 10")
tadd(ip.ports"1", {2,3, 5, 10}, "1-3 5 10")
tadd(ip.ports"1,2", {2,3, 5, 10}, "1-3 5 10")
tadd(ip.ports"1,2", {3, 5, 10}, "1-3 5 10")
tadd(ip.ports"1,2,3,5", {3, 5, 10}, "1-3 5 10")
tadd(ip.ports"1,2,3,5", {5, 10}, "1-3 5 10")
tadd(ip.ports"1,2,3,5", {10}, "1-3 5 10")
tadd(ip.ports"1,2,3,5,10", {10}, "1-3 5 10")
tadd(ip.ports"1,2,3,5,10", {}, "1-3 5 10")
tadd(ip.ports"", {10, 5, 3, 2, 1}, "1-3 5 10")
tadd(ip.ports"1", {10, 5, 3, 2, 1}, "1-3 5 10")
tadd(ip.ports"1, 2", {10, 5, 3, 2, 1}, "1-3 5 10")
tadd(ip.ports"1, 2", {10, 5, 3, 1}, "1-3 5 10")
tadd(ip.ports"1, 2", {10, 5, 3, 2}, "1-3 5 10")
tadd(ip.ports"1, 2", {10, 5, 3}, "1-3 5 10")
tadd(ip.ports"1, 2 3", {10, 5}, "1-3 5 10")
tadd(ip.ports"1, 2 3 10", {10, 5}, "1-3 5 10")
tadd(ip.ports"1, 2 3 10", {5}, "1-3 5 10")
tadd(ip.ports"1, 2 3 5", {10, 5}, "1-3 5 10")
tadd(ip.ports"1, 2 3 5", {10}, "1-3 5 10")
