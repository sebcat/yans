#!/bin/sh

# PID of current child, if any
CHILD=

# Exit status of last child, if any
STATUS=

# TCP ports to check
: ${TCP_PORTS_PLAIN=21,22,25,53,80,110,143,443,6667-6669,7000,8000,8008,8010,8080,8081,8880}
: ${TCP_PORTS_TLS=80,443,465,990,993,995,6697,8010,8443}

# scan(1) binary to use
: ${SCAN:=scan}

# webfetch(1) binary to use
: ${WEBFETCH:=webfetch}

# flags to use for all invocations of $SCAN
: ${SCANOPTS:=}

# initial input file
: ${INPUT:=subject.txt}

clear_manifest() {
  printf '' | store put MANIFEST > /dev/null
}

# manifest <file> <descr>
manifest() {
  store append MANIFEST > /dev/null
}

byebye() {
  if [ -n "$CHILD" ]; then
    kill -TERM "$CHILD" 2>/dev/null
    wait "$CHILD"
  fi
  printf "Caught HUP/INT/TERM - exiting\n"
  exit 1
}

trap byebye HUP INT TERM

run() {
  printf "[%s] Starting %s\n" "$(date '+%Y-%m-%d %H:%M:%S %z')" "$*"
  ( exec "$@" ) &
  CHILD=$!
  wait "$CHILD"
  STATUS=$?
  CHILD=
  if [ "$STATUS" -eq 0 ]; then
    printf "[%s] Done\n" "$(date '+%Y-%m-%d %H:%M:%S %z')"
  else
    printf "[%s] Failed with status code: %s\n" \
        "$(date '+%Y-%m-%d %H:%M:%S %z')" "$STATUS"
  fi
}

clear_manifest

run $SCAN resolve                   \
    $SCANOPTS                       \
    --in          "$INPUT"          \
    --out         zlib:resolved.txt.gz

if [ -n "$TCP_PORTS_PLAIN" ]; then
  run $SCAN banners                           \
      $SCANOPTS                               \
      --timeout         5                     \
      --ports           "$TCP_PORTS_PLAIN"    \
      --mdelay-per-tick 100                   \
      --max-clients     256                   \
      --in              zlib:resolved.txt.gz  \
      --out             zlib:banners.plain.gz
fi

if [ -n "$TCP_PORTS_TLS" ]; then
  run $SCAN banners                           \
      $SCANOPTS                               \
      --tls                                   \
      --timeout         5                     \
      --ports           "$TCP_PORTS_TLS"      \
      --mdelay-per-tick 100                   \
      --max-clients     256                   \
      --in              zlib:resolved.txt.gz  \
      --out             zlib:banners.tls.gz
fi

run $SCAN collate                             \
    $SCANOPTS                                 \
    --type banners                            \
    --in-banners        zlib:banners.plain.gz \
    --in-banners        zlib:banners.tls.gz   \
    --out-services-csv  zlib:services.csv.gz  \
    --out-svccert-csv   zlib:svccert.csv.gz   \
    --out-certs-csv     zlib:certs.csv.gz     \
    --out-cert-sans-csv zlib:sans.csv.gz

run $SCAN collate                               \
    $SCANOPTS                                   \
    --type matches                              \
    --in-banners         zlib:banners.plain.gz  \
    --in-banners         zlib:banners.tls.gz    \
    --in-services-csv    zlib:services.csv.gz   \
    --out-compsvc-csv    zlib:banner-compsvc.csv.gz

cat <<EOF | manifest
services.csv.gz Services
certs.csv.gz Certificates
svccert.csv.gz Certificates by Service
sans.csv.gz Certificate Subject Alternative Names
EOF

run $SCAN collate                             \
    $SCANOPTS                                 \
    --type httpmsgs                           \
    --in-services-csv zlib:services.csv.gz    \
    --out-httpmsgs zlib:httpreqs.bin.gz

run $WEBFETCH                                      \
    --in-httpmsgs zlib:httpreqs.bin.gz             \
    --module logger --params                       \
        --out-logfile zlib:httpmsgs.log.gz ';'     \
    --module writer --params                       \
        --out-httpmsgs zlib:httpmsgs.bin.gz ';'    \
    --module matcher --params                      \
        --out-compsvc-csv zlib:http-compsvc.csv.gz

run $SCAN collate                                  \
    $SCANOPTS                                      \
    --type components                              \
    --in-compsvc-csv zlib:banner-compsvc.csv.gz    \
    --in-compsvc-csv zlib:http-compsvc.csv.gz      \
    --out-compidsvcid-csv zlib:compidsvcid.csv.gz  \
    --out-components-csv zlib:components.csv.gz

cat <<EOF | manifest
components.csv.gz Components
compidsvcid.csv.gz Components by Service
EOF

run $SCAN collate                                  \
    $SCANOPTS                                      \
    --type cves                                    \
    --vulnspec components                          \
    --in-components-csv zlib:components.csv.gz     \
    --out-cves-csv zlib:cves.csv.gz

cat <<EOF | manifest
cves.csv.gz CVE Search
EOF

printf "[%s] Scan done\n" "$(date '+%Y-%m-%d %H:%M:%S %z')"
