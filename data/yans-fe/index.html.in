<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Yans</title>
<style>
body {
  margin: 0px;
  font-family: Roboto,"Helvetica Neue",Arial,sans-serif;
}

.navbar {
  background-color: #007bff;
  font-size: 1.25rem;
  padding: .5rem 1rem;
  display: flex;
  flex-direction: row;
}

.navbar a {
  color: #fff;
  text-decoration: none;
  margin-right: 1rem;
}

.navbar a:hover {
  color: #ccc;
}

.navbar small {
  color: #444;
}

.navbar-ents {
  list-style: none;
  display: flex;
  flex-direction: row;
  flex-grow: 1;
  margin: 0;
  padding: 0;
}

#main-box {
  margin: 1rem 1.5rem;
}

#alert-box {
  display: none;
  opacity: 1;
  transition: opacity 0.2s;
}

#alert-close {
  cursor: pointer;
}

.even {
  background: #ddd;
}

.odd {
  background: #ccc;
}

.entry-first {
  border-top-left-radius: .5rem;
  border-top-right-radius: .5rem;
}

.entry-last {
  border-bottom-left-radius: .5rem;
  border-bottom-right-radius: .5rem;
}

.entry-header {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  padding: .5rem;
}

.entry-header-left {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  margin-right: auto;
}

.entry-title {
  font-size: larger;
}

.entry-subtitle {
  vertical-align: super;
  font-size: smaller;
  margin-left: 1rem;
}

.entry-header-right {
  align-self: center;
  margin-right: 1rem;
}

.entry-content {
  /* placeholder */
  opacity: 1;
  transition: opacity 0.2s;
}

.loader {
  animation: spin 1.5s linear infinite;
  border: .1rem solid #ffffff;
  border-top: .1rem solid lightblue;
  border-radius: 100%;
  width: 1rem;
  height: 1rem;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}


</style>
</head>
<body>

<div id="alert-box">
  <span id="alert-close">
    &times;
  </span> 
  <span id="alert-text"></span>
</div>

<nav class="navbar">
    <ul class="navbar-ents">
      <li><a href="#/a1/reports">Reports</a></li>
      <li><a href="#scan">Scan Now</a></li>
    </ul>
    <small>@PACKAGE_VERSION@</small>
</nav>

<div id="main-box">
  <noscript>This webapp requires JavaScript</noscript>
</div>


<script>
"use strict";

function _diffString(n, str) {
  n = Math.floor(n);
  if (n == 1) {
    return n + " " + str + " ago";
  } else {
    return n + " " + str + "s ago";
  }
}

function diffString(start, end) {
  var diff = end - start;
  if (diff < 10) {
    return "now";
  } else if (diff < 60) {
    return _diffString(diff, "second");
  } else if (diff < 3600) {
    return _diffString(diff / 60, "minute");
  } else if (diff < 86400) {
    return _diffString(diff / 3600, "hour");
  } else {
    return _diffString(diff / 86400, "day");
  }
}

function JReq(method_, url_, data_) {
  if (!(this instanceof JReq))
    return new JReq(method_, url_, data_);

  this.done = function(cb) {
    this.on_done = cb;
    return this;
  };

  this.error = function(cb) {
    this.on_error = cb;
    return this;
  };

  this.send = function() {
    if (typeof this.data_ === "string") {
      this.xhr.send(data_);
    } else if (data_) {
      this.xhr.send(JSON.stringify(data_));
    } else {
      this.xhr.send();
    }
    return this;
  };

  this.xhrcb = function() {
    if(this.xhr.readyState === 4) {
      if (this.xhr.status == 200) {
        this.on_done(this.xhr.responseText);
      } else if (this.error) {
        this.on_error(method_ + " request failed for " + url_);
      }
    }
  };

  this.xhr = new XMLHttpRequest();
  this.xhr.open(method_, url_);
  this.xhr.setRequestHeader("Content-Type", "application/json");
  this.xhr.onreadystatechange = this.xhrcb.bind(this);
  return this;
}

/* Roger routes requests. */
function Roger(errfunc, defaultRoute) {
  if (!(this instanceof Roger)) {
    return new Roger(errfunc, defaultRoute);
  }

  var self = this;
  self.LUT = {};
  self.defaultRoute = defaultRoute;
  self.errfunc = errfunc || function(msg) {};

  self.routeRequest = function() {
    /* parse the URL in the URI fragment */
    var url = document.createElement("a"); 
    if (window.location.hash) {
      url.href = window.location.hash.substring(1);
    }

    /* find out what we should request */
    var dst;
    var func = self.LUT[url.pathname];
    if (func) {
      dst = url.pathname + url.search;
    } else {
      func = self.LUT[self.defaultRoute];
      dst = self.defaultRoute;
    }

    /* if we have a response handler for the request, request the response */
    if (func) {
      JReq("GET", dst)
        .done(function(data) {
          func(data);
        }).error(function(msg) {
          self.errfunc(msg);
        }).send();
    }
  }

  self.register = function(path, func) {
    self.LUT[path] = func;
    return self;
  }

  self.run = function() {
    window.addEventListener("hashchange", self.routeRequest);
    self.routeRequest();
    return self;
  }

  return self;
}

function Loader() {
  var d = document.createElement("div");
  d.className = "loader";
  return d;
}

function ListEntry(opts) {
  /* determine if this is an "odd" entry */
  var evenodd;
  if (opts.odd) {
    evenodd = "odd";
  } else {
    evenodd = "even";
  }

  /* create the left part of the header, w/ title and subtitle (if any) */
  var left = document.createElement("div");
  left.className = "entry-header-left";
  if (opts.title) {
    var t = document.createElement("div");
    t.className = "entry-title";
    t.appendChild(opts.title);
    left.appendChild(t);
  }
  if (opts.subtitle) {
    var st = document.createElement("div");
    st.className = "entry-subtitle";
    st.innerText = opts.subtitle;
    left.appendChild(st);
  }

  /* create the entry header itself */
  var hdr = document.createElement("div");
  var hdrparams = ["entry-header"]
  hdrparams.push(evenodd);
  if (opts.first) {
    hdrparams.push("entry-first");
  }
  if (opts.last) {
    hdrparams.push("entry-last");
  }
  hdr.className = hdrparams.join(" ");
  hdr.appendChild(left);

  /* if we have a right part, append it too */
  if (opts.right) {
    var r = document.createElement("div");
    r.className = "entry-header-right";
    r.appendChild(opts.right);
    hdr.appendChild(r);
  }

  var cnt = document.createElement("div");
  cnt.className = "entry-content " + evenodd;
  cnt.id = opts.cntId;

  var e = document.createElement("div");
  e.appendChild(hdr);
  e.appendChild(cnt);

  return e;
}

function YansView(pname) {
  if (!(this instanceof YansView)) {
    return new YansView(pname);
  }

  var self = this;
  var parent = document.getElementById(pname);

  self.renderReportEntries = function(report) {
    var elem = document.getElementById("report-" + report.id);
    console.log(report);
    /* TODO: If elem does not exist, create it and set it as
     * a child of 'pname' */
  };

  self.renderReports = function(reports) {
    var entries = reports.entries;
    entries.reverse();
    var now = reports.now_ts;
    var reportdiv = document.createElement("div");
    for (var i = 0; i < entries.length; i++) {
      var anchor = document.createElement("a");
      anchor.href = "#/a1/report-sections?id=" + entries[i].id;
      anchor.text = entries[i].id;

      var r;
      if (entries[i].running) {
        r = Loader();
      } else {
        r = document.createElement("span");
        r.innerHTML = "&#10004";
      }

      var sub = diffString(entries[i].ts, now);

      var entry = ListEntry({
        title: anchor,
        subtitle: sub,
        odd: i % 2 != 0 ? true : false,
        first: i == 0 ? true : false,
        last: i == entries.length - 1 ? true : false,
        right: r,
        cntId: "report-" + entries[i].id,
      });

      reportdiv.appendChild(entry);
    }

    parent.innerHTML = '';
    parent.appendChild(reportdiv);
  };

};

/* functionality for closing the alert thingy */
document.getElementById("alert-close").onclick = function() {
  var p = this.parentElement;
  p.style.opacity = 0;
  setTimeout(function() {
    p.style.display = "none";
  }, 200);
};

/* called whenever something breaks */
function appErrFunc(text) {
  var txt = document.getElementById("alert-text");
  txt.innerText = text;
  txt.parentElement.style.opacity = 1;
  txt.parentElement.style.display = "unset";
}

var ui = YansView("main-box");
Roger(appErrFunc, "/a1/reports")
  .register("/a1/fail", function(data) {
    data = JSON.parse(data);
    if (!data.success) {
      appErrFunc(data.errmsg);
    }
  })
  .register("/a1/reports", function(data) {
    data = JSON.parse(data);
    if (!data.success) {
      appErrFunc(data.errmsg);
      return;
    }
    data = data.data;
    ui.renderReports(data);
  }).register("/a1/report-sections", function(data) {
    data = JSON.parse(data);
    if (!data.success) {
      appErrFunc(data.errmsg);
    }
    ui.renderReportEntries(data.data);
  }).run();

</script>

</body>
</html>
