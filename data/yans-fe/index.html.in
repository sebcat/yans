<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Yans</title>
<style>

body {
  margin: 0px;
  font-family: Roboto,"Helvetica Neue",Arial,sans-serif;
}

input[type="text"] {
  padding: .3rem;
}

button {
  background: #ddd;
  cursor: pointer;
}

button:active {
  background: #aaa;
}

table {
  border-collapse: collapse;
  table-layout: fixed;
  width: 100%;
}

table td {
  border: 1px solid black;
  padding-left: .25rem;
  padding-right: .25rem;
  text-align: center;
  word-wrap: break-word;
}

table tr:nth-child(1) td {
  font-weight: bold;
}

.input-group {
  display: inline-flex;
  flex-wrap: wrap;
  align-items: stretch;
}

.input-group input[type="text"] {
  flex-grow: 1;
}

.input-group-prepend {
  margin-right: -1px;
}

.input-group-append {
  margin-left: -1px;
}

.input-group-prepend, .input-group-append {
  display: flex;
  border: 1px solid rgba(0,0,0,.2);
}

.navbar {
  background-color: #007bff;
  font-size: 1.25rem;
  padding: .5rem 1.5rem;
  display: flex;
  flex-direction: row;
}

.entry-header {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  padding: .5rem;
}

.entry-list > div:nth-child(even) {
  background: #ddd;
}

.entry-list > div:nth-child(odd) {
  background: #ccc;
}

.entry-list > div:nth-child(1) {
  border-top-left-radius: .5rem;
  border-top-right-radius: .5rem;
}

.entry-list > div:nth-last-child(1) {
  border-bottom-left-radius: .5rem;
  border-bottom-right-radius: .5rem;
}


.entry-header-left {
  display: flex;
  flex-direction: column;
  flex-wrap: wrap;
  margin-right: auto;
}

.entry-title {
  font-size: larger;
}

.entry-subtitle {
  vertical-align: super;
  font-size: smaller;
  margin-left: 1rem;
}

.entry-header-right {
  align-self: center;
  margin-right: 1rem;
}

.entry-content {
  opacity: 1;
  transition: opacity 0.2s;
  padding: .5rem;
}

.report-sections a {
  font-size: small;
}

.report-section {
  font-family: monospace;
  margin: .5rem;
}

.loader {
  animation: spin 1.5s linear infinite;
  border: .1rem solid #ffffff;
  border-top: .1rem solid lightblue;
  border-radius: 100%;
  width: 1rem;
  height: 1rem;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

#main-box {
  margin: 1.5rem 1.5rem;
}

#alert-box {
  display: none;
  opacity: 1;
  transition: opacity 0.2s;
}

#alert-close {
  cursor: pointer;
}

#footer {
  text-align: center;
  font-style: italic;
  font-size: smaller;
  color: #ccc;
  margin: 1rem;
}

</style>
</head>
<body>

<div id="alert-box">
  <span id="alert-close">
    &times;
  </span> 
  <span id="alert-text"></span>
</div>

<div class="navbar">
  <div class="input-group">
    <input id="scan-subject" type="text" class="input-group-append"
        placeholder="domain or address..." />
    <button id="scan-btn" class="input-group-append">Scan Now!</button>
  </div>
</div>

<div id="main-box">
  <noscript>This webapp requires JavaScript</noscript>
</div>

<div id="footer">
  @PACKAGE_VERSION@
</div>


<script>
"use strict";

function _diffString(n, str) {
  n = Math.floor(n);
  if (n == 1) {
    return n + " " + str + " ago";
  } else {
    return n + " " + str + "s ago";
  }
}

function diffString(start, end) {
  let diff = end - start;
  if (diff < 10) {
    return "now";
  } else if (diff < 60) {
    return _diffString(diff, "second");
  } else if (diff < 3600) {
    return _diffString(diff / 60, "minute");
  } else if (diff < 86400) {
    return _diffString(diff / 3600, "hour");
  } else {
    return _diffString(diff / 86400, "day");
  }
}

function sizeString(nbytes) {
  if (nbytes < 1024) {
    return nbytes + " B";
  } else if (nbytes < 1048576) {
    return Math.round(nbytes / 1024) + " KiB";
  } else {
    return Math.round(nbytes / 1048576) + " MiB";
  }
}

function CSV(separator_) {
  if (!separator_) {
    separator_ = ",";
  }

  if (!(this instanceof CSV))
    return new CSV(separator_);

  let self = this;
  let pos_;

  self.parseEscaped = function(data) {
    pos_++;
    let start = pos_;
    while (pos_ < data.length) {
      if (data.charAt(pos_) === "\"") {
        if (data.charAt(pos_+1) === "\"") {
          pos_ = pos_ + 2;
        } else {
          break;
        }
      } else {
        pos_++;
      }
    }
    return data.substring(start, pos_).replace(/""/g, "\"");
  };

  self.parseUnescaped = function(data) {
    let start = pos_;
    while (pos_ < data.length) {
      let ch = data.charAt(pos_);
      if (ch === separator_ || ch === "\n") {
        return data.substring(start, pos_);
      } else if (ch === "\r" && data.charAt(pos_+1) === "\n") {
        let str = data.substring(start, pos_);
        pos_++;
        return str;
      }
      pos_++;
    }
    if (pos_ > start) {
      return data.substring(start, pos_);
    }
  };

  self.parse = function(data) {
    let rows = [];
    let row = [];
    let lastfield = "";
    pos_ = 0;

    while (pos_ < data.length) {
      switch(data.charAt(pos_)) {
      case separator_:
        row.push(lastfield);
        lastfield = "";
        pos_++;
        break;
      case "\"":
        lastfield = self.parseEscaped(data);
        break;
      case "\r":
      case "\n":
        if (row.length > 0 || lastfield.length > 0) {
          row.push(lastfield);
        }
        lastfield = "";
        if (row.length > 0) { 
          rows.push(row);
          row = [];
        }
        pos_++;
        break;
      default:
        lastfield = self.parseUnescaped(data);
        break;
      }
    }

    if (row.length > 0 || lastfield.length > 0) {
      row.push(lastfield);
    }
    if (row.length > 0) {
      rows.push(row);
    }
    return rows;
  };
};

function CSVTable(data) {
  const rows = CSV().parse(data);
  const table = document.createElement("table");
  for (let i = 0; i < rows.length; i++) {
    const row = rows[i];
    const tr = document.createElement("tr");
    for (let j = 0; j < row.length; j++) {
      const td = document.createElement("td");
      td.appendChild(document.createTextNode(row[j]));
      tr.appendChild(td);
    }
    table.appendChild(tr);
  }

  return table;
}

function JReq(method_, url_, data_) {
  if (!(this instanceof JReq))
    return new JReq(method_, url_, data_);

  this.done = function(cb) {
    this.on_done = cb;
    return this;
  };

  this.error = function(cb) {
    this.on_error = cb;
    return this;
  };

  this.send = function() {
    if (typeof data_ === "string") {
      this.xhr.send(data_);
    } else if (data_) {
      this.xhr.send(JSON.stringify(data_));
    } else {
      this.xhr.send();
    }
    return this;
  };

  this.xhrcb = function() {
    if(this.xhr.readyState === 4) {
      const rtext = this.xhr.responseText;
      if (this.xhr.status == 200) {
        this.on_done(rtext);
      } else if (this.error) {
        const ctype = this.xhr.getResponseHeader("Content-Type")
        if (ctype === "text/plain" && rtext && rtext.length > 0) {
          this.on_error(rtext);
        } else {
          this.on_error(method_ + " request failed for " + url_);
        }
      }
    }
  };

  this.xhr = new XMLHttpRequest();
  this.xhr.open(method_, url_);
  this.xhr.setRequestHeader("Content-Type", "application/json");
  this.xhr.onreadystatechange = this.xhrcb.bind(this);
  return this;
}

/* Roger routes requests. */
function Roger(errfunc, defaultRoute) {
  if (!(this instanceof Roger)) {
    return new Roger(errfunc, defaultRoute);
  }

  let self = this;
  self.LUT = {};
  self.defaultRoute = defaultRoute;
  self.errfunc = errfunc || function(msg) {};

  self.routeRequest = function() {
    /* parse the URL in the URI fragment */
    let url = document.createElement("a"); 
    if (window.location.hash) {
      url.href = window.location.hash.substring(1);
    }

    /* find out what we should request */
    let dst;
    let func = self.LUT[url.pathname];
    if (func) {
      dst = url.pathname + url.search;
    } else {
      func = self.LUT[self.defaultRoute];
      dst = self.defaultRoute;
    }

    /* if we have a response handler for the request, request the response */
    if (func) {
      JReq("GET", dst)
        .done(function(data) {
          func(data);
        }).error(function(msg) {
          self.errfunc(msg);
        }).send();
    }
  }

  self.register = function(path, func) {
    self.LUT[path] = func;
    return self;
  }

  self.run = function() {
    window.addEventListener("hashchange", self.routeRequest);
    self.routeRequest();
    return self;
  }

  return self;
}

function Loader() {
  let d = document.createElement("div");
  d.className = "loader";
  return d;
}

function ListEntry(opts) {
  /* create the left part of the header, w/ title and subtitle (if any) */
  let left = document.createElement("div");
  left.className = "entry-header-left";
  if (opts.title) {
    let t = document.createElement("div");
    t.className = "entry-title";
    t.appendChild(opts.title);
    left.appendChild(t);
  }
  if (opts.subtitle) {
    let st = document.createElement("div");
    st.className = "entry-subtitle";
    st.innerText = opts.subtitle;
    left.appendChild(st);
  }

  /* create the entry header itself */
  let hdr = document.createElement("div");
  hdr.className = "entry-header";
  hdr.appendChild(left);

  /* if we have a right part, append it too */
  if (opts.right) {
    if (typeof opts.right === "string") {
      opts.right = document.createTextNode(opts.right);
    }
    let r = document.createElement("div");
    r.className = "entry-header-right";
    r.appendChild(opts.right);
    hdr.appendChild(r);
  }

  let cnt = document.createElement("div");
  cnt.className = "entry-content";
  cnt.id = "content-" + opts.cntId;

  let e = document.createElement("div");
  e.className = "entry";
  e.id = "entry-" + opts.cntId;
  e.appendChild(hdr);
  e.appendChild(cnt);

  return e;
}

function YansView(pname) {
  if (!(this instanceof YansView)) {
    return new YansView(pname);
  }

  let self = this;
  let parent = document.getElementById(pname);
  
  self.getStatusSymbol = function(statusstr) {
    let r;
    if (statusstr === "running") {
      r = Loader();
    } else if (statusstr === "queued") {
      r = document.createElement("span");
      r.innerHTML = "Q";
    } else {
      r = document.createElement("span");
      r.innerHTML = "&#10004";
    }
    return r;
  };

  self.updateReport = function(id, status, entries) {
    let entry = document.getElementById("entry-" + id);
    /* FIXME: if was running, but no longer is running */
    if (status !== "running") {
      /* not running: replace the running symbol */
      let ehr = entry.querySelector(".entry-header-right");
      ehr.replaceChild(self.getStatusSymbol(status), ehr.firstChild);

      /* TODO: Maybe merge the old entries with the new, keeping any
       *       expanded entries expanded &c */
    }
  };

  self.renderReportEntries = function(report) {
    let report_id = report.id;
    let elem = document.getElementById("content-" + report_id);
    if (!elem) {
      let reportdiv = document.createElement("div");
      reportdiv.className = "entry-list";

      let anchor = document.createElement("a");
      anchor.href = "#/a1/report-sections?id=" + report_id;
      anchor.text = report.name ? report.name : report_id;
      let subtitlestr = report.started ?
          diffString(report.started, report.now_ts) : 
          "";
      let entry = ListEntry({
        title: anchor,
        subtitle: subtitlestr,
        right: self.getStatusSymbol(report.status),
        cntId: report_id
      });
      reportdiv.appendChild(entry);
      parent.innerHTML = '';
      parent.appendChild(reportdiv);
      elem = document.getElementById("content-" + report_id);
    }

    let sectiondiv = document.createElement("div");
    sectiondiv.className = "report-sections";
    report.entries.sort(function(a,b) {
      let aorder = /^report-([0-9]+)-/g.exec(a.name)[1];
      let border = /^report-([0-9]+)-/g.exec(b.name)[1];
      return aorder - border;

    })
    for (let i = 0; i < report.entries.length; i++) {
      const entry_name = report.entries[i].name;

      const adiv = document.createElement("div");
      const anchor = document.createElement("a");
      let txt = /^report-[0-9]+-([^.]+)\./g.exec(entry_name)[1];
      txt = txt.charAt(0).toUpperCase() + txt.substr(1);
      txt += " (" + sizeString(report.entries[i].nbytes) + ")";
      anchor.text = txt;
      const url = "/a1/report-section?id=" + report_id + "&name=" + entry_name;
      anchor.href = "#" + url;

      anchor.addEventListener("click", function(e) {
        e.preventDefault();
        let section_id = "report-section-" + report_id + "-" + entry_name;
        let se = document.getElementById(section_id);
        if (se) {
          se.parentElement.removeChild(se);
        } else {
          JReq("GET", url)
            .done(function(data) {
              let ctype = this.xhr.getResponseHeader("Content-Type")
              let secdiv = document.createElement("div");
              secdiv.className = "report-section";
              secdiv.id = section_id;
              if (ctype === "application/vnd.ms-excel") {
                secdiv.appendChild(CSVTable(data));
              } else {
                secdiv.appendChild(document.createTextNode(data));
              }
              adiv.appendChild(secdiv);
            }).error(function(msg) {
              adiv.appendChild(document.createTextNode(data));
            }).send();
        }
      })

      adiv.appendChild(anchor);
      sectiondiv.appendChild(adiv);
    }

    elem.appendChild(sectiondiv);
  };

  self.renderReports = function(reports) {
    let entries = reports.entries;
    entries.reverse();
    let now = reports.now_ts;
    let reportdiv = document.createElement("div");
    reportdiv.className = "entry-list";
    for (let i = 0; i < entries.length; i++) {
      let anchor = document.createElement("a");
      anchor.href = "#/a1/report-sections?id=" + entries[i].id;
      anchor.text = entries[i].name;

      let entry = ListEntry({
        title: anchor,
        subtitle: diffString(entries[i].ts, now),
        right: self.getStatusSymbol(entries[i].status),
        cntId: entries[i].id,
      });

      reportdiv.appendChild(entry);
    }

    parent.innerHTML = '';
    parent.appendChild(reportdiv);
  };

};

/* functionality for closing the alert thingy */
document.getElementById("alert-close").onclick = function() {
  let p = this.parentElement;
  p.style.opacity = 0;
  setTimeout(function() {
    p.style.display = "none";
  }, 200);
};

/* called whenever something breaks */
function appErrFunc(text) {
  let txt = document.getElementById("alert-text");
  txt.innerText = text;
  txt.parentElement.style.opacity = 1;
  txt.parentElement.style.display = "unset";
}

document.getElementById("scan-btn").onclick = function() {
  let subject = document.getElementById("scan-subject").value;
  if (!subject || subject.length == 0) {
    appErrFunc("Missing/invalid scan subject");
    return;
  }

  let datas = JSON.stringify({subject: subject});
  JReq("POST", "/a1/scan", datas)
      .done(function(data) {
        data = JSON.parse(data);
        if (!data.success) {
          appErrFunc(data.errmsg);
          return;
        }

        document.location.hash = "#/a1/report-sections?id=" + data.data.id;
      }).error(function(msg) {
        appErrFunc(msg);
      }).send();
};

document.getElementById("scan-subject").onkeyup = function(e) {
  e.preventDefault();
  if (e.keyCode === 13) {
    document.getElementById("scan-btn").click();
  }
};

let ui = YansView("main-box");
let roger = Roger(appErrFunc, "/a1/reports")
  .register("/a1/fail", function(data) {
    data = JSON.parse(data);
    if (!data.success) {
      appErrFunc(data.errmsg);
    }
  })
  .register("/a1/reports", function(data) {
    data = JSON.parse(data);
    if (!data.success) {
      appErrFunc(data.errmsg);
      return;
    }
    data = data.data;
    ui.renderReports(data);
  }).register("/a1/report-sections", function(data) {
    data = JSON.parse(data);
    if (!data.success) {
      appErrFunc(data.errmsg);
      return;
    }
    ui.renderReportEntries(data.data);
  });

roger.run();

/* Poll running scans every once in a while. This is very hacky and
 * fragile. But hey, can't spell fragile without agile! */
function xxx() {
  let entries = document.getElementsByClassName("entry");
  let to_refresh = [];
  for (let i = 0; i < entries.length; i++) {
    let entry = entries[i];
    let is_running = entry.querySelector(".loader") == null ? false : true;
    if (is_running) {
      let entId = entry.id.replace(/entry-/, "");
      to_refresh.push(entId);
    }
  }

  for (let i = 0; i < to_refresh.length; i++) {
    let report_id = to_refresh[i];
    JReq("GET","/a1/report-sections?id=" + report_id)
      .done(function(data) {
        data = JSON.parse(data);
        if (!data.success) {
          appErrFunc(data.errmsg);
          return;
        }
        let res = data.data;
        ui.updateReport(res.id, res.status, res.entries);
      }).error(function(msg) {
        appErrFunc(msg);
      }).send();
  }
}

window.setInterval(xxx, 2000);

</script>

</body>
</html>
