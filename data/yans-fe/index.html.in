<!DOCTYPE html>
<html>
<head>
<title>Yans</title>
<style>
body {
  margin: 0px;
  font-family: Roboto,"Helvetica Neue",Arial,sans-serif;
}

.navbar {
  background-color: #007bff;
  font-size: 1.25rem;
  padding: .5rem 1rem;
  display: flex;
  flex-direction: row;
}

.navbar a {
  color: #fff;
  text-decoration: none;
  margin-right: 1rem;
}

.navbar a:hover {
  color: #ccc;
}

.navbar small {
  color: #444;
}

.navbar-ents {
  list-style: none;
  display: flex;
  flex-direction: row;
  flex-grow: 1;
  margin: 0;
  padding: 0;
}

#main-box {
  margin: 1rem 1.5rem;
}

#alert-box {
  display: none;
  opacity: 1;
  transition: opacity 0.2s;
}

#alert-close {
  cursor: pointer;
}

</style>
</head>
<body>

<div id="alert-box">
  <span id="alert-close">
    &times;
  </span> 
  <span id="alert-text"></span>
</div>

<nav class="navbar">
    <ul class="navbar-ents">
      <li><a href="#/a1/reports">Reports</a></li>
      <li><a href="#scan">Scan Now</a></li>
    </ul>
    <small>@PACKAGE_VERSION@</small>
</nav>

<div id="main-box"></div>

<noscript>This webapp requires JavaScript</noscript>

<script>
"use strict";

function JReq(method_, url_, data_) {
  if (!(this instanceof JReq))
    return new JReq(method_, url_, data_);

  this.done = function(cb) {
    this.on_done = cb;
    return this;
  };

  this.error = function(cb) {
    this.on_error = cb;
    return this;
  };

  this.send = function() {
    if (typeof this.data_ === "string") {
      this.xhr.send(data_);
    } else if (data_) {
      this.xhr.send(JSON.stringify(data_));
    } else {
      this.xhr.send();
    }
    return this;
  };

  this.xhrcb = function() {
    if(this.xhr.readyState === 4) {
      if (this.xhr.status == 200) {
        this.on_done(this.xhr.responseText);
      } else if (this.error) {
        this.on_error(method_ + " request failed for " + url_);
      }
    }
  };

  this.xhr = new XMLHttpRequest();
  this.xhr.open(method_, url_);
  this.xhr.setRequestHeader("Content-Type", "application/json");
  this.xhr.onreadystatechange = this.xhrcb.bind(this);
  return this;
}

/* Roger routes requests. */
function Roger(errfunc, defaultRoute) {
  if (!(this instanceof Roger)) {
    return new Roger(errfunc, defaultRoute);
  }

  var self = this;
  self.LUT = {};
  self.defaultRoute = defaultRoute;
  self.errfunc = errfunc || function(msg) {};

  self.routeRequest = function() {
    /* parse the URL in the URI fragment */
    var url = document.createElement("a"); 
    if (window.location.hash) {
      url.href = window.location.hash.substring(1);
    }

    /* find out what we should request */
    var dst;
    var func = self.LUT[url.pathname];
    if (func) {
      dst = url.pathname + url.search;
    } else {
      func = self.LUT[self.defaultRoute];
      dst = self.defaultRoute;
    }

    /* if we have a response handler for the request, request the response */
    if (func) {
      JReq("GET", dst)
        .done(function(data) {
          func(data);
        }).error(function(msg) {
          self.errfunc(msg);
        }).send();
    }
  }

  self.register = function(path, func) {
    self.LUT[path] = func;
    return self;
  }

  self.run = function() {
    window.addEventListener("hashchange", self.routeRequest);
    self.routeRequest();
    return self;
  }

  return self;
}

/* functionality for closing the alert thingy */
document.getElementById("alert-close").onclick = function() {
  var p = this.parentElement;
  p.style.opacity = 0;
  setTimeout(function() {
    p.style.display = "none";
  }, 200);
};

/* called whenever something breaks */
function appErrFunc(text) {
  var txt = document.getElementById("alert-text");
  txt.innerText = text;
  txt.parentElement.style.opacity = 1;
  txt.parentElement.style.display = "unset";
}

Roger(appErrFunc, "/a1/reports")
  .register("/a1/reports", function(data) {
    data = JSON.parse(data);
    if (data.success) {
      data = data.data;
      data.reverse();
      var x = "";
      for (var i = 0; i < data.length; i++) {
        x = x + data[i].row + ": " + data[i].id + " " + 
                new Date(data[i].ts * 1000).toUTCString() + "\n";
        console.log(x);
      }
    }
  }).run();

</script>

</body>
</html>
