<!DOCTYPE html>
<html>
<head>
<title>Yans</title>
<style>
body {
  margin: 0px;
  font-family: Roboto,"Helvetica Neue",Arial,sans-serif;
}

.navbar {
  background-color: #007bff;
  font-size: 1.25rem;
  padding: .5rem 1rem;
  display: flex;
  flex-direction: row;
}

.navbar a {
  color: #fff;
  text-decoration: none;
  margin-right: 1rem;
}

.navbar a:hover {
  color: #ccc;
}

.navbar small {
  color: #444;
}

.navbar-ents {
  list-style: none;
  display: flex;
  flex-direction: row;
  flex-grow: 1;
  margin: 0;
  padding: 0;
}

#main-box {
  margin: 1rem 1.5rem;
}

#alert-box {
  display: none;
  opacity: 1;
  transition: opacity 0.6s;
}

#alert-close {
  cursor: pointer;
}

</style>
</head>
<body>

<div id="alert-box">
  <span id="alert-close">
    &times;
  </span> 
  <span id="alert-text"></span>
</div>

<nav class="navbar">
    <ul class="navbar-ents">
      <li><a href="#reports">Reports</a></li>
      <li><a href="#scan">Scan Now</a></li>
    </ul>
    <small>@PACKAGE_VERSION@</small>
</nav>

<div id="main-box"></div>

<noscript>This webapp requires JavaScript</noscript>

<script>
"use strict";

document.getElementById("alert-close").onclick = function() {
  var p = this.parentElement;
  p.style.opacity = 0;
  setTimeout(function() {
    p.style.display = "none";
  }, 600);
};

function errfunc(text) {
  var txt = document.getElementById("alert-text");
  txt.innerText = text;
  txt.parentElement.style.opacity = 1;
  txt.parentElement.style.display = "unset";
}

function JReq(method_, url_, data_) {
  if (!(this instanceof JReq))
    return new JReq(method_, url_, data_);

  this.done = function(cb) {
    this.on_done = cb;
    return this;
  };

  this.error = function(cb) {
    this.on_error = cb;
    return this;
  };

  this.send = function() {
    if (typeof this.data_ === "string") {
      this.xhr.send(data_);
    } else if (data_) {
      this.xhr.send(JSON.stringify(data_));
    } else {
      this.xhr.send();
    }
    return this;
  };

  this.xhrcb = function() {
    if(this.xhr.readyState === 4) {
      if (this.xhr.status == 200) {
        var resp = JSON.parse(this.xhr.responseText);
        if (resp.success) {
          if (this.done) {
            this.on_done(resp.data);
          }
        } else {
          if (resp.errmsg) {
            this.on_error(resp.errmsg);
          } else {
            this.on_error("An unexpected 200 response was received");
          }
        }
      } else if (this.error) {
        this.on_error(method_ + " request failed for " + url_);
      }
    }
  };

  this.xhr = new XMLHttpRequest();
  this.xhr.open(method_, url_);
  this.xhr.setRequestHeader("Content-Type", "application/json");
  this.xhr.onreadystatechange = this.xhrcb.bind(this);
  return this;
}

function Yans(_top, _err) {
  if (!(this instanceof Yans))
    return new Yans(_top);

  this.top = document.getElementById(_top);
  if (_err) {
    this.err = _err;
  } else {
    this.err = function(txt) {
      console.log(txt);
    };
  }

  var self = this;

  this.renderScan = function() {
    self.top.innerText  = "Scans away!";
  };

  this.renderReports = function() {
    self.top.innerText  = "Show me the reports!";
    JReq("GET", "/a1/reports")
      .done(function(data) {
        data.reverse();
        var x = "";
        for (var i = 0; i < data.length; i++) {
          x = x + data[i].row + ": " + data[i].id + " " + 
                  new Date(data[i].ts * 1000).toUTCString() + "\n";
        }
        self.top.innerText = x;
      }).error(function(msg) {
        self.err(msg);
      }).send();
  };

  this.renderLUT = {
    'scan':    this.renderScan.bind(this),
    'reports': this.renderReports.bind(this),
  };

  this.render = function() {
    var view;
    if (window.location.hash) {
      view = window.location.hash.substring(1);
    }

    var f = this.renderLUT[view];
    if (f) {
      f();
    } else {
      this.renderReports(); /* default */
    }
  };

  window.addEventListener("hashchange", this.render.bind(this));
  this.render();
}

var y = new Yans("main-box", errfunc);

</script>

</body>
</html>

