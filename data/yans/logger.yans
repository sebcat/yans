local _M = {}

function _M:new(o)
  o = o or {}
  o.writer = o.writer or io.stderr
  self.__index = self
  setmetatable(o, self)
  return o
end

function _M:writef(prefix, fmt, ...)
  local realfmt = string.format("%s%s\n", prefix, fmt)
  self.writer:write(string.format(realfmt, table.unpack({...})))
end

function _M:twritef(prefix, fmt, argtbl)
  local realfmt = string.format("%s%s\n", prefix, fmt)
  self.writer:write(string.format(realfmt, table.unpack(argtbl)))
end

function _M:dump(val, indent)
  indent = indent or 0
  if type(val) ~= "table" then
    self:writef("DUMP: ", "%s%s (%s)",
        string.rep(" ", indent), tostring(val), type(val))
    return
  end

  for k,v in pairs(val) do
    self:writef("DUMP: ", "%s%s (%s)",
        string.rep(" ", indent), tostring(k), type(k))
    self:dump(v, indent+2)
  end
end

function _M:log_info(fmt, ...)
  self:twritef("INFO: ", fmt, {...})
end

function _M:log_error(fmt, ...)
  self:twritef("ERR:  ", fmt, {...})
end

return _M
