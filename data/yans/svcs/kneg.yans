local _M = {

}

function _M:new(o)
  assert(o.path, "missing kneg path")
  assert(o.msgbuf, "missing msgbuf")
  local ycl = yans.ycl
  o.sock = ycl.connect(o.path)
  self.__index = self
  setmetatable(o, self)
  return o
end

function _M:pids(ids)
  if type(ids) == "table" then
    ids = table.concat(ids, "\0")
  end
  self.msgbuf:create_knegd_req{
    action = "pids",
    id = ids,
  }
  self.sock:sendmsg(self.msgbuf)
  self.sock:recvmsg(self.msgbuf)
  local resp = self.msgbuf:parse_status_resp()
  assert(not resp.errmsg, resp.errmsg)
  return resp.okmsg
end

function _M:start(t, id)
  self.msgbuf:create_knegd_req{
    action = "start",
    type   = t,
    id     = id,
  }
  self.sock:sendmsg(self.msgbuf)
  self.sock:recvmsg(self.msgbuf)
  local resp = self.msgbuf:parse_status_resp()
  assert(not resp.errmsg, resp.errmsg)
  return resp.okmsg
end

return _M
