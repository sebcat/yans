local _M = {}

function _M:new(o)
  assert(o.path, "missing kneg path")
  assert(o.msgbuf, "missing msgbuf")
  local ycl = yans.ycl
  o.sock = ycl.connect(o.path)
  self.__index = self
  setmetatable(o, self)
  return o
end

-- returns: whitespace delimited string of elements
function _M:_listreq(o)
  if type(o.id) == "table" then
    o.id = table.concat(o.id, "\0")
  end
  self.msgbuf:create_knegd_req(o)
  self.sock:sendmsg(self.msgbuf)
  self.sock:recvmsg(self.msgbuf)
  local resp = self.msgbuf:parse_status_resp()
  assert(not resp.errmsg, resp.errmsg)
  return resp.okmsg
end

function _M:status(ids)
  return self:_listreq{action = "status", id = ids}
end

function _M:pids(ids)
  return self:_listreq{action = "pids", id = ids}
end

function _M:_rr(o)
  self.msgbuf:create_knegd_req(o)
  self.sock:sendmsg(self.msgbuf)
  self.sock:recvmsg(self.msgbuf)
  local resp = self.msgbuf:parse_status_resp()
  assert(not resp.errmsg, resp.errmsg)
  return resp.okmsg
end

function _M:start(o)
  o.action = "start"
  self:_rr(o)
end

function _M:queue(o)
  o.action = "queue"
  self:_rr(o)
end

return _M
