local _M = {}

function _M:new(o)
  assert(o.path, "missing store path")
  assert(o.msgbuf, "missing msgbuf")
  local ycl = yans.ycl
  o.sock = ycl.connect(o.path)
  o.store_id = nil -- will be set on when enter is called, set here for doc
  self.__index = self
  setmetatable(o, self)
  return o
end

function _M:index()
  self.msgbuf:create_store_req{
    action = "index",
  }
  self.sock:sendmsg(self.msgbuf)
  return self.sock:recvfd():to_sindex("r")
end

function _M:list(store_id, must_match)
  self.msgbuf:create_store_req{
    action          = "list",
    store_id        = store_id,
    list_must_match = must_match,
  }
  self.sock:sendmsg(self.msgbuf)
  self.sock:recvmsg(self.msgbuf)
  local resp = self.msgbuf:parse_store_list()
  assert(not resp.errmsg, resp.errmsg)
  local ents = resp.entries or ""
  local res = {}
  for m in ents:gmatch("[^\0]+") do
    table.insert(res,m)
  end
  return res
end

function _M:enter(opts)
  opts = opts or {}
  assert(not self.store_id, "attempted entering store more than once")
  self.msgbuf:create_store_req{
    action   = "enter",
    store_id = opts.id,
    name     = opts.name,
    indexed  = opts.indexed,
  }
  self.sock:sendmsg(self.msgbuf)
  self.sock:recvmsg(self.msgbuf)
  local resp = self.msgbuf:parse_status_resp()
  assert(not resp.errmsg, resp.errmsg)
  store_id = resp.okmsg
  assert(store_id and #store_id > 0, "invalid store ID from service")
  self.store_id = store_id
  return store_id
end

function _M:open(path, flags)
  assert(self.store_id, "open called in store that was not entered")
  self.msgbuf:create_store_entered_req{
    action     = "open",
    open_path  = path,
    open_flags = flags,
  }
  self.sock:sendmsg(self.msgbuf)
  return self.sock:recvfd()
end

function _M:rename(from, to)
  assert(self.store_id, "open called in store that was not entered")
  self.msgbuf:create_store_entered_req{
    action      = "rename",
    rename_from = from,
    rename_to   = to,
  }
  self.sock:sendmsg(self.msgbuf)
  self.sock:recvmsg(self.msgbuf)
  local resp = self.msgbuf:parse_status_resp()
  assert(not resp.errmsg, resp.errmsg)
end

return _M
