#!/usr/bin/env yans

Scanner = require"scanner"
PacketReader = require"ethframe.reader"


local function main()
  local scanner = Scanner:new() -- setup the scanner
  local params = cgi.init()     -- get env.vars and enter sandbox

  -- setup the store
  local store_id = scanner:store_enter()
  print("STORE   ", store_id)
  print("---")

  -- get the network configuration
  local netconf = scanner:get_netconf()
  scanner:print_netconf(netconf)

  -- send link-local discovery frames for all source addresses
  for _, entry in pairs(netconf) do
    -- setup the capture for this interface (mode: 448 == 0700)
    -- XXX: This filter does not guarantee hosts to be on the local network
    local ifname, ifaddr = entry.ifname, entry.ifaddr
    local fmt = "(not ether src %s) and (arp[6:2] = 2 or icmp or udp or ip6)"
    local filter = string.format(fmt, ifaddr)
    local filename = string.format("disco-%s.pcap", ifname)
    local fd = scanner:store_open(filename, ycl.O_CREAT|ycl.O_WRONLY, 448)
    print(string.format("%s: %s", filename, filter))
    scanner:pcap_start(fd, ifname, filter)
    util.nanosleep(0, 500000000) -- wait a bit to establish the capture

    for _, ip4_src in pairs(entry.ip4_srcs) do
      scanner:send_packets{
        iface = ifname,
        categories = "arp-req|ll-disco",
        eth_src = ifaddr,
        ip_src = ip4_src,
        ip_dsts = table.concat(entry.ip4_dsts, " "),
      }
    end

    for _, ip6_src in pairs(entry.ip6_srcs) do
      scanner:send_packets{
        iface = ifname,
        categories = "ll-disco",
        eth_src = ifaddr,
        ip_src = ip6_src,
      }
    end

    util.nanosleep(3,0) -- wait a bit for incoming frames
    scanner:pcap_stop()
  end

  -- read captured frames
  for _, entry in pairs(netconf) do
    local ifname, ifaddr = entry.ifname, entry.ifaddr
    local filename = string.format("disco-%s.pcap", ifname)
    local fd = scanner:store_open(filename, ycl.O_RDONLY)
    local stream = fd:to_stream("rb")
    print(fd, stream)
    local packets = PacketReader:open(stream)
    if packets then
      local iter = packets:next()
      local fsec, ffrac, data = iter()
      print(string.format("0.0: %d bytes", #data))
      for sec, frac, data in iter do
        if sec-fsec > 0 then ffrac = 0 end
        print(string.format("%d.%d: %d bytes", sec-fsec, frac-ffrac, #data))
      end
    end
    stream:close()
  end
end

main()

