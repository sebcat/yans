#!/bin/sh
# PROVIDE: ethd
# REQUIRE: LOGIN FILESYSTEMS
# KEYWORD: shutdown

. /etc/rc.subr

# Creating the user:
#   pw useradd ethd -d /nonexistent  -g yans -s /usr/sbin/nologin
#
# Add the yansgroup if not already present
#   pw groupadd yans
#
#   pw -R <rootdir> ... for images/buildroots/jails
#
# The daemon drops user privs itself, which is why ethd_user, ethd_group
# is not used
: ${ethd_enable:="no"}
: ${ethd_duser:="ethd"}
: ${ethd_dgroup:="yans"}
: ${ystatedir:="@LOCALSTATEDIR@/yans"}
: ${ethd_basepath:="${ystatedir}/ethd"}

# devfs needs to be mounted inside the chroot of ethd so that
# it is possible for ethd to access the bpf device. The ID
# of this ruleset must be set in /etc/rc.conf.
#
# NB: if the ruleset is set but the ID does not exist in /etc/devfs.rules
#     a new one will be used, with no hidden devices. This is bad.
#
# example ruleset:
#   [ethdrules=67]
#   add hide
#   add path bpf user ethd mode 600 unhide
: ${ethd_devfs_ruleset:=""}

name="ethd"
rcvar="ethd_enable"
command="@BINDIR@/${name}"
command_args="-u '${ethd_duser}' -g '${ethd_dgroup}' -b '${ethd_basepath}'"
start_precmd="ethd_precmd"
pidfile="${ethd_basepath}/ethd.pid"

mountpoint_is_type() {
  local _ mountpoint fstype
  while read -r _ mountpoint fstype _; do
    if [ "$1" = "$mountpoint" -a "$2" = "$fstype" ]; then
      return 0
    fi
  done <<EOF
  $(mount -p)
EOF
  return 1
}

ethd_precmd()
{
  [ -z "${ethd_devfs_ruleset}" ] && err 1 "No devfs ruleset for ethd"

  install -m 775 -o root -g yans -d "${ystatedir}" || {
    err 1 "Failed to create ${ystatedir}"
  }

  install -m 750 -o "${ethd_duser}" -g "${ethd_dgroup}" \
      -d "${ethd_basepath}" || {
    err 1 "Failed to create ${clid_basepath}"
  }

  # create the devfs mountpoint for bpf device
  install -m 750 -o "${ethd_duser}" -g "${ethd_dgroup}" \
      -d "${ethd_basepath}/dev" || {
    err 1 "Failed to create ${clid_basepath}/dev"
  }

  # mount devfs if not already mounted
  mountpoint_is_type "${ethd_basepath}/dev" devfs || {
    mount -t devfs -o "ruleset=${ethd_devfs_ruleset}" devfs \
        "${ethd_basepath}/dev" || {
      err 1 "Failed to mount ethd devfs"
    }

    # sanity check devfs rule: nonexistent rulesets means mounting with the
    # default one
    [ -e "${ethd_basepath}/dev/mem" -o -e "${ethd_basepath}/dev/kmem" ] &&
      err 1 "a too permissive devfs is mounted for ethd"
  }

  return 0
}

load_rc_config $name
run_rc_command "$1"
