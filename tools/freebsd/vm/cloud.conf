#!/bin/sh

export NOSWAP=YES

die() {
  echo "$1" >&2
  exit 1
}

setup_ro_sshd() {
  cat <<EOF > "${DESTDIR}/etc/ssh/xsshd_config"
HostKey /var/xsshd/ssh_host_ed25519_key
PermitRootLogin no
PasswordAuthentication no
ChallengeResponseAuthentication no
AllowAgentForwarding no
AllowTcpForwarding no
X11Forwarding no
PrintMotd no
VersionAddendum none
Subsystem	sftp	/usr/libexec/sftp-server
EOF

  # FIXME: is there a way to have a PID-file that does not conflict with
  #        sshd?
  cat <<"EOF" > "${DESTDIR}/etc/rc.d/xsshd"
#!/bin/sh

# PROVIDE: xsshd
# REQUIRE: LOGIN FILESYSTEMS
# KEYWORD: shutdown

. /etc/rc.subr

name="xsshd"
desc="R/O sshd"
rcvar="xsshd_enable"
command="/usr/sbin/sshd"
command_args="-f /etc/ssh/xsshd_config"
start_precmd="sshd_precmd"
pidfile="/var/run/sshd.pid"

sshd_precmd() {
  local xsshd_dir="/var/xsshd"
  local keyfile="${xsshd_dir}/ssh_host_ed25519_key"
  [ -f "$keyfile" ] && return 0
  install -d -m 0700 ${xsshd_dir}
  /usr/bin/ssh-keygen -q -t ed25519 -f "$keyfile" -N ""
  /usr/bin/ssh-keygen -l -f "$keyfile.pub"
}

load_rc_config $name
run_rc_command "$1"
EOF

  chmod 555 "${DESTDIR}/etc/rc.d/xsshd"
}

setup_users() {
  # Add user daemons
  pw -R "$DESTDIR" groupadd yans -g 666
  for A in clid ethd knegd stored yansapi; do
    pw -R "$DESTDIR" useradd "$A" -d /nonexist -g yans -s /usr/sbin/nologin
  done

  # Add a default user: scan-user
  # TODO: Make ssh pubkey configurable
  local userdir=$DESTDIR/usr/home/scan-user
  pw -R "$DESTDIR" useradd scan-user -u 666 -m -g yans -s /bin/sh
  install -m 0700 -d "$userdir/.ssh"
  cat <<EOF > "$userdir/.ssh/authorized_keys"
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/5pzWzyyXO3hx95WLDRedFSVtZzmySbCkpw8cqwjmFPrdM6Vom2GN4MRzZ1ly4WaGhn/y+Jt2zqAO/hPWlA+EvGLOR3Q8pSrcT8/HqhiHvCG4N5CyX8bc6cWYmC8jvZgtHszqZOMPLCD9O/427F7QLQoS7hZJqrEHN1aDiweX//xRp8NAc95/2RyzZBGw5di6Y63JUB9uZibB2Bq3F2J9M2neqPdhMzRcB78WZr0T6oAOzmA0ZfUSpJjOutf5UjcQsAheXvtzOKkKTi1mTT6xeW8qSvNCPQjo6QWSGbFZxAcZwMjHzaXJEgc6UKK+BzQY/bdN4e/3WO3GDvEctG1wrX4F/QMfOMjQ4zOas1GcddRzAHsZmz9lTV171jJ1gT3jkGjejbITHUBHqUOF0ZFK2KzA+rj0H4XVXifXn4xhnYEi28gCKG/TY2+5zw8I24u+kqNcKlqBWa/vzokUJR/bVOJo6kYokcVwhL+icUqOPAppwXCHXzjuPl0B6aF0VNQR/B5fgVlyA84AdoeHnrbs5ew2gPzFdrpsFZP18jz1n8ti2gR3SwtJkhLjlBlhR/jWiTbmYj756GzzjabX/DkBidErfIwWga7kaAlyA+yCP56h3fOPT7pYN0JaivMCgVjr+RZsHDaqjCi4iDd9U8H+EeRgKFFVBkpe37vOs6PKgQ== scmc@resistance
EOF

  # Fix permission and ownership
  chown 666:666 "$userdir/.ssh/authorized_keys"
  chown 666:666 "$userdir/.ssh"
  chmod 600 "$userdir/.ssh/authorized_keys"
  chmod 700 "$userdir"
  chmod 700 "$DESTDIR/root"

  # Remove unneeded users
  pw -R "$DESTDIR" userdel toor
}

vm_extra_pre_umount() {
  # Do some basic DESTDIR validation
  [ -z "$DESTDIR" -o "$DESTDIR" = "/" ] && die "Missing/invalid DESTDIR"

  # Remove directories that are likely to be empty (depending on src.conf
  # and other things...)
  for A in rescue .snap media mnt net; do
    rmdir "$DESTDIR/$A"
  done

  # Remove kernel modules
  # XXX: We should not have any kernel modules to begin with
  for K in "$DESTDIR"/boot/kernel/*.ko; do
    rm -f "$K"
  done

  # Remove misc stuff
  for F in /usr/lib/libc_pic.a; do
    rm -f "$DESTDIR/$F"
  done

  # Compress kernel
  gzip -9 "$DESTDIR/boot/kernel/kernel"

  # Mount / as read-only 
  cat <<EOF > "${DESTDIR}/etc/fstab"
/dev/gpt/rootfs / ufs ro 1 1
EOF

  cat <<EOF > "${DESTDIR}/etc/ttys"
ttyv0   "/usr/libexec/getty Pc"         xterm   on  secure
ttyu0	"/usr/libexec/getty 3wire"	vt100	onifconsole	secure
EOF

  cat <<EOF > "${DESTDIR}/etc/host.conf"
hosts
dns
EOF

  cat <<EOF > "${DESTDIR}/etc/motd"
This week in music: Cab Calloway

EOF

  setup_ro_sshd

  cat <<EOF >> "${DESTDIR}/etc/rc.conf"
hostname="darkstar"
sendmail_enable="NONE"
hostid_enable="NO"
update_motd="NO"
ifconfig_DEFAULT="SYNCDHCP inet6 accept_rtadv"

#R/O sshd
sshd_enable="NO"
xsshd_enable="YES"

root_rw_mount="NO"
tmpmfs="YES"
tmpsize="64M"
clear_tmp_enable="NO"
varmfs="YES"
varsize="128M"
populate_var="YES"

syslogd_flags="-s"
kern_securelevel_enable="YES"
kern_securelevel="3"
EOF

  cat <<EOF > "${DESTDIR}/etc/sysctl.conf"
security.bsd.stack_guard_page=1
security.bsd.see_other_uids=0
kern.randompid=2341

# change these if we go from non-R/O root
kern.shutdown.kproc_shutdown_wait=1
kern.shutdown.poweroff_delay=5000

# tune TCP for a lot of transient connections
net.inet.tcp.keepinit=15000            # connect(2) timeout
net.inet.tcp.keepidle=60000            # msec before keep-alive begins
net.inet.tcp.keepintvl=15000           # keep-alive interval
net.inet.tcp.keepcnt=3                 # # of keep-alive packets
net.inet.tcp.finwait2_timeout=1000
net.inet.tcp.fast_finwait2_recycle=1

net.inet6.ip6.redirect=0
net.inet6.icmp6.rediraccept=0

# scanning will get really noisy without these
net.inet.tcp.drop_synfin=1
net.inet.tcp.blackhole=2
net.inet.udp.blackhole=1

kern.panic_reboot_wait_time=0
EOF

  cat <<EOF >> "${DESTDIR}/boot/loader.conf"
autoboot_delay="-1"
beastie_disable="YES"
EOF

  cat <<EOF >> "${DESTDIR}/etc/devfs.rules"
[yansrules=67]
add hide
add path log unhide
add path null unhide
add path zero unhide
add path crypto unhide
add path random unhide
add path urandom unhide
add path stdin unhide
add path stdout unhide
add path stderr unhide
add path fd unhide
add path 'fd/*' unhide
add path bpf mode 660 unhide
EOF

  setup_users

  return 0
}

vm_extra_install_base() {
  # Do some basic DESTDIR validation
  [ -z "$DESTDIR" -o "$DESTDIR" = "/" ] && die "Missing/invalid DESTDIR"

  # TODO: Fix path
  DESTDIR=$DESTDIR make -C ../../.. install install-strip install-rcfiles
}

