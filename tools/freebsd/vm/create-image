#!/bin/sh -xe
# Copyright (c) 2019 Sebastian Cato
#
# Permission is hereby granted, free of charge, to any person obtaining
# a copy of this software and associated documentation files (the
# "Software"), to deal in the Software without restriction, including
# without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so, subject to
# the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
# LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
# WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

die() {
  printf '%s\n' "$1" >&2
  exit 1
}

: ${MBR:=/usr/obj/usr/src/amd64.amd64/stand/i386/pmbr/pmbr}
: ${EFIBOOT1:=/usr/obj/usr/src/amd64.amd64/stand/efi/boot1/boot1.efifat}
: ${BOOTFS:=/usr/obj/usr/src/amd64.amd64/stand/i386/gptboot/gptboot}
: ${ROOTFS:=$1}
: ${VMSIZE:=128M}
: ${DESTDIR:=$(pwd)}

[ -f "$MBR" ] || die "missing MBR"
[ -f "$BOOTFS" ] || die "missing BOOTFS"
[ -f "$ROOTFS" ] || die "missing ROOTFS"

: ${OUTFILE:=$2}
: ${OUTFILE:=$(basename "$ROOTFS" .rootfs).raw}

copy_rootfs() {
  # when the rootfs was build, unneeded base artifacts were removed,
  # packages were installed, repo data was removed &c. This creates
  # garbage on the rootfs.
  #
  # create a new image, set it up, mount ROOTFS and copy the files from
  # it to the newly created image to get rid of that.

  local moldyimg=$1
  local freshimg=$2
  local freshmnt="$DESTDIR/fresh"
  local moldymnt="$DESTDIR/moldy"
  rm -f "$freshimg"
  truncate -s "$VMSIZE" "$freshimg"
  mkdir -p "$moldymnt" || die "unable to create moldy mount point"
  mkdir -p "$freshmnt" || die "unable to create fresh mount point"
  local mdmoldy=$(mdconfig -f "$moldyimg") || die "moldy mdconfig failed"
  local mdfresh=$(mdconfig -f "$freshimg") || die "fresh mdconfig failed"
  newfs -L rootfs "/dev/$mdfresh"
  mount "/dev/$mdfresh" "$freshmnt" || die "failed fresh mount"
  mount "/dev/$mdmoldy" "$moldymnt" || die "failed moldy mount"
  tar -cf- -C "$moldymnt" . | tar -xUf- -C "$freshmnt" || \
    die "failed to copy moldy to fresh"
  umount "$moldymnt"
  umount "$freshmnt"
  mdconfig -du "$mdmoldy"
  mdconfig -du "$mdfresh"
  rmdir "$moldymnt" "$freshmnt"
}

FRESHROOTFS=$DESTDIR/fresh.rootfs
copy_rootfs "$ROOTFS" "$FRESHROOTFS"

# on fresh rootfs: enable soft updates and set minfree to 2%
# XXX: currently the file system is r/o and a low minfree is OK. Should
#      it be made r/w, it should be at the default and the image size
#      should be increased to fit that.
tunefs -m '2%' -n enable "$FRESHROOTFS"

mkimg -s gpt \
    -a 3 \
    -f raw \
    -b "$MBR" \
    -p "efi:=${EFIBOOT1}" \
    -p "freebsd-boot/bootfs:=${BOOTFS}" \
    -p "freebsd-ufs/rootfs:=${FRESHROOTFS}" \
    -o "$OUTFILE"
